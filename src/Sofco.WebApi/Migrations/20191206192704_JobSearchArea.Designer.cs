// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sofco.DAL;

namespace Sofco.WebApi.Migrations
{
    [DbContext(typeof(SofcoContext))]
    [Migration("20191206192704_JobSearchArea")]
    partial class JobSearchArea
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("app")
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sofco.Domain.Models.Admin.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Admin.Functionality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ModuleId");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Functionalities");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Admin.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("RoleId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Admin.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Admin.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Admin.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("Modified");

                    b.Property<int>("Type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Admin.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("CategoryId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Admin.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("ExternalManagerId")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.Advancement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdvancementReturnForm")
                        .HasMaxLength(200);

                    b.Property<decimal>("Ammount");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("InWorkflowProcess");

                    b.Property<int?>("MonthsReturnId");

                    b.Property<int>("PaymentForm");

                    b.Property<DateTime?>("StartDateReturn");

                    b.Property<int>("StatusId");

                    b.Property<int>("Type");

                    b.Property<int>("UserApplicantId");

                    b.Property<int?>("UserId");

                    b.Property<string>("UsersAlreadyApproved");

                    b.Property<int>("WorkflowId");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("MonthsReturnId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserApplicantId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Advancements");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.AdvancementHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvancementId");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("StatusFromId");

                    b.Property<int>("StatusToId");

                    b.Property<string>("UserName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AdvancementId");

                    b.HasIndex("StatusFromId");

                    b.HasIndex("StatusToId");

                    b.ToTable("AdvancementHistories");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.AdvancementRefund", b =>
                {
                    b.Property<int>("AdvancementId");

                    b.Property<int>("RefundId");

                    b.HasKey("AdvancementId", "RefundId");

                    b.HasIndex("RefundId");

                    b.ToTable("AdvancementRefunds");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.Refund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnalyticId");

                    b.Property<bool>("CashReturn");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CreditCardId");

                    b.Property<decimal>("CurrencyExchange");

                    b.Property<int>("CurrencyId");

                    b.Property<bool>("InWorkflowProcess");

                    b.Property<bool>("LastRefund");

                    b.Property<int>("StatusId");

                    b.Property<decimal>("TotalAmmount");

                    b.Property<int>("UserApplicantId");

                    b.Property<int?>("UserId");

                    b.Property<string>("UsersAlreadyApproved");

                    b.Property<int>("WorkflowId");

                    b.HasKey("Id");

                    b.HasIndex("AnalyticId");

                    b.HasIndex("CreditCardId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserApplicantId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.RefundDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Ammount");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .HasMaxLength(300);

                    b.Property<int>("Order");

                    b.Property<int>("RefundId");

                    b.HasKey("Id");

                    b.HasIndex("RefundId");

                    b.ToTable("RefundDetails");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.RefundFile", b =>
                {
                    b.Property<int>("FileId");

                    b.Property<int>("RefundId");

                    b.HasKey("FileId", "RefundId");

                    b.HasIndex("RefundId");

                    b.ToTable("RefundFiles");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.RefundHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("RefundId");

                    b.Property<int>("StatusFromId");

                    b.Property<int>("StatusToId");

                    b.Property<string>("UserName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("RefundId");

                    b.HasIndex("StatusFromId");

                    b.HasIndex("StatusToId");

                    b.ToTable("RefundHistories");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.SalaryDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AdvancementSalaryDiscounts");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.Allocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnalyticId");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(50);

                    b.Property<decimal>("Percentage");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("AnalyticId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Allocations");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.Analytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId")
                        .HasMaxLength(150);

                    b.Property<string>("AccountName")
                        .HasMaxLength(150);

                    b.Property<int?>("ActivityId");

                    b.Property<int?>("ClientGroupId");

                    b.Property<DateTime?>("ClosedAt");

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(25);

                    b.Property<int?>("CommercialManagerId");

                    b.Property<int>("CostCenterId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("EndDateContract");

                    b.Property<int?>("ManagerId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("Proposal")
                        .HasMaxLength(2000);

                    b.Property<int>("SectorId");

                    b.Property<string>("ServiceId");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(200);

                    b.Property<int?>("ServiceTypeId");

                    b.Property<int?>("SoftwareLawId");

                    b.Property<int?>("SolutionId");

                    b.Property<DateTime>("StartDateContract");

                    b.Property<int>("Status");

                    b.Property<int?>("TechnologyId");

                    b.Property<string>("Title")
                        .HasMaxLength(150);

                    b.Property<int>("TitleId");

                    b.Property<string>("UsersQv")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ClientGroupId");

                    b.HasIndex("CommercialManagerId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SectorId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("SoftwareLawId");

                    b.HasIndex("SolutionId");

                    b.HasIndex("TechnologyId");

                    b.ToTable("Analytics");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.CostCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("Code")
                        .HasMaxLength(3);

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Letter")
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.ToTable("CostCenters");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(400);

                    b.Property<string>("AssignComments")
                        .HasMaxLength(1000);

                    b.Property<string>("Bank")
                        .HasMaxLength(200);

                    b.Property<int>("BeneficiariesCount");

                    b.Property<decimal>("BillingPercentage");

                    b.Property<DateTime?>("Birthday");

                    b.Property<int>("BusinessHours");

                    b.Property<string>("BusinessHoursDescription")
                        .HasMaxLength(150);

                    b.Property<string>("Country")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedByUser")
                        .HasMaxLength(50);

                    b.Property<decimal>("Cuil")
                        .HasColumnType("decimal(12, 0)");

                    b.Property<int>("DocumentNumber");

                    b.Property<string>("DocumentNumberType")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasMaxLength(150);

                    b.Property<string>("EmployeeNumber");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("EndReason")
                        .HasMaxLength(2000);

                    b.Property<int>("ExamDaysTaken");

                    b.Property<bool>("ExcludeForTigerReport");

                    b.Property<int>("ExtraHolidaysQuantity");

                    b.Property<int>("ExtraHolidaysQuantityByLaw");

                    b.Property<bool>("HasCreditCard");

                    b.Property<bool>("HasExtraHolidays");

                    b.Property<int>("HealthInsuranceCode");

                    b.Property<int>("HolidaysByLaw");

                    b.Property<int>("HolidaysPending");

                    b.Property<int>("HolidaysPendingByLaw");

                    b.Property<bool>("IsExternal");

                    b.Property<string>("Location")
                        .HasMaxLength(200);

                    b.Property<int?>("ManagerId");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("OfficeAddress")
                        .HasMaxLength(400);

                    b.Property<int>("PhoneAreaCode");

                    b.Property<int>("PhoneCountryCode");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100);

                    b.Property<string>("PrepaidAmount")
                        .HasMaxLength(200);

                    b.Property<int>("PrepaidHealthCode");

                    b.Property<string>("PrepaidPlan")
                        .HasMaxLength(100);

                    b.Property<string>("Profile")
                        .HasMaxLength(100);

                    b.Property<string>("Province")
                        .HasMaxLength(200);

                    b.Property<string>("Salary")
                        .HasMaxLength(200);

                    b.Property<string>("Seniority")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Technology")
                        .HasMaxLength(300);

                    b.Property<int?>("TypeEndReasonId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeNumber")
                        .IsUnique()
                        .HasFilter("[EmployeeNumber] IS NOT NULL");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TypeEndReasonId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.EmployeeEndNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantUserId");

                    b.Property<DateTime?>("Created");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("Recipients")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("EmployeeEndNotifications");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.EmployeeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<string>("EmployeeData");

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("EmployeeHistory");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.EmployeeLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("LicenseTypeNumber");

                    b.Property<DateTime?>("Modified");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("EmployeeLicenses");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.EmployeeProfileHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<string>("EmployeeData");

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(50);

                    b.Property<string>("EmployeePreviousData");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedFields");

                    b.HasKey("Id");

                    b.ToTable("EmployeeProfileHistory");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.EmployeeSyncAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<string>("EmployeeData");

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime?>("Modified");

                    b.Property<DateTime?>("StartDate");

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("EmployeeSyncActions");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.HealthInsurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code");

                    b.Property<DateTime?>("Created");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("Name")
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("HealthInsurances");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.LicenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CertificateRequired");

                    b.Property<int>("Days");

                    b.Property<string>("Description")
                        .HasMaxLength(300);

                    b.Property<int>("TaskId");

                    b.Property<bool>("WithPayment");

                    b.HasKey("Id");

                    b.ToTable("LicenseTypes");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.PrepaidHealth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<DateTime?>("Created");

                    b.Property<int>("HealthInsuranceCode");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("Name")
                        .HasMaxLength(400);

                    b.Property<int>("PrepaidHealthCode");

                    b.HasKey("Id");

                    b.ToTable("PrepaidHealths");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.ReportPowerBi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Manager")
                        .HasMaxLength(200);

                    b.Property<decimal>("Month1");

                    b.Property<decimal>("Month2");

                    b.Property<decimal>("Month3");

                    b.Property<decimal>("Month4");

                    b.Property<string>("Profile")
                        .HasMaxLength(200);

                    b.Property<string>("Resource")
                        .HasMaxLength(200);

                    b.Property<string>("Seniority")
                        .HasMaxLength(200);

                    b.Property<string>("Technology")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("ReportsPowerBi");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId")
                        .HasMaxLength(100);

                    b.Property<string>("AccountName")
                        .HasMaxLength(100);

                    b.Property<int?>("FileId");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<string>("UpdateByUser")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdateDate");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId")
                        .HasMaxLength(200);

                    b.Property<string>("CrmId")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int>("StatusId");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("City")
                        .HasMaxLength(200);

                    b.Property<string>("Contact")
                        .HasMaxLength(200);

                    b.Property<string>("Country")
                        .HasMaxLength(200);

                    b.Property<string>("CrmId")
                        .HasMaxLength(200);

                    b.Property<string>("Cuit")
                        .HasMaxLength(200);

                    b.Property<string>("CurrencyDescription")
                        .HasMaxLength(200);

                    b.Property<string>("CurrencyId")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("OwnerId")
                        .HasMaxLength(200);

                    b.Property<int?>("PaymentTermCode")
                        .HasMaxLength(200);

                    b.Property<string>("PaymentTermDescription")
                        .HasMaxLength(200);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(200);

                    b.Property<string>("Province")
                        .HasMaxLength(200);

                    b.Property<string>("Telephone")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.Hito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Currency")
                        .HasMaxLength(10);

                    b.Property<string>("CurrencyId")
                        .HasMaxLength(150);

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("ExternalHitoId");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("Modified");

                    b.Property<short>("Month");

                    b.Property<string>("OpportunityId")
                        .HasMaxLength(150);

                    b.Property<decimal?>("OriginalAmount");

                    b.Property<string>("ProjectId");

                    b.Property<int>("SolfacId");

                    b.Property<decimal>("Total");

                    b.HasKey("Id");

                    b.HasIndex("SolfacId");

                    b.ToTable("Hitos");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.HitoDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description")
                        .HasMaxLength(3000);

                    b.Property<int>("HitoId");

                    b.Property<DateTime?>("Modified");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal>("Total");

                    b.Property<decimal>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("HitoId");

                    b.ToTable("HitoDetails");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId");

                    b.Property<string>("AccountName")
                        .HasMaxLength(100);

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("Analytic")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Cuit")
                        .HasMaxLength(100);

                    b.Property<int?>("ExcelFileId");

                    b.Property<string>("InvoiceNumber")
                        .HasMaxLength(50);

                    b.Property<int>("InvoiceStatus");

                    b.Property<int?>("PdfFileId");

                    b.Property<string>("Project")
                        .HasMaxLength(100);

                    b.Property<string>("ProjectId");

                    b.Property<string>("Province")
                        .HasMaxLength(100);

                    b.Property<string>("Service")
                        .HasMaxLength(100);

                    b.Property<string>("ServiceId");

                    b.Property<int?>("SolfacId");

                    b.Property<int>("UserId");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ExcelFileId");

                    b.HasIndex("PdfFileId");

                    b.HasIndex("SolfacId");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.InvoiceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("InvoiceId");

                    b.Property<int>("StatusFrom");

                    b.Property<int>("StatusTo");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UserId");

                    b.ToTable("InvoiceHistories");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.Opportunity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("ActualValue");

                    b.Property<string>("ContactId")
                        .HasMaxLength(200);

                    b.Property<string>("CrmId")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("Number")
                        .HasMaxLength(50);

                    b.Property<string>("ParentContactName")
                        .HasMaxLength(200);

                    b.Property<string>("ProjectManagerId")
                        .HasMaxLength(200);

                    b.Property<string>("ProjectManagerName")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId")
                        .HasMaxLength(200);

                    b.Property<bool>("Active");

                    b.Property<string>("CrmId")
                        .HasMaxLength(200);

                    b.Property<string>("Currency")
                        .HasMaxLength(200);

                    b.Property<string>("CurrencyId")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("Incomes");

                    b.Property<string>("Integrator")
                        .HasMaxLength(200);

                    b.Property<string>("IntegratorId")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("OpportunityId")
                        .HasMaxLength(200);

                    b.Property<string>("OpportunityName")
                        .HasMaxLength(200);

                    b.Property<string>("OpportunityNumber")
                        .HasMaxLength(200);

                    b.Property<Guid?>("PrincipalContactId");

                    b.Property<string>("PrincipalContactName")
                        .HasMaxLength(200);

                    b.Property<decimal>("RealIncomes");

                    b.Property<bool>("Remito");

                    b.Property<string>("ServiceId");

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("TotalAmmount");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId")
                        .HasMaxLength(150);

                    b.Property<string>("AccountName")
                        .HasMaxLength(150);

                    b.Property<bool>("Adjustment");

                    b.Property<DateTime?>("AdjustmentDate");

                    b.Property<int?>("AreaId");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000);

                    b.Property<string>("CommentsForAdjustment")
                        .HasMaxLength(2000);

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("FicheDeSignature")
                        .HasMaxLength(200);

                    b.Property<int?>("FileId");

                    b.Property<decimal>("Margin");

                    b.Property<string>("Number")
                        .HasMaxLength(150);

                    b.Property<string>("PaymentForm")
                        .HasMaxLength(200);

                    b.Property<string>("Proposal")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("ReceptionDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .HasMaxLength(1000);

                    b.Property<string>("UpdateByUser")
                        .HasMaxLength(25);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("FileId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.PurchaseOrderAmmountDetail", b =>
                {
                    b.Property<int>("PurchaseOrderId");

                    b.Property<int>("CurrencyId");

                    b.Property<decimal>("Adjustment");

                    b.Property<decimal?>("AdjustmentBalance");

                    b.Property<decimal>("Ammount");

                    b.Property<decimal>("Balance");

                    b.HasKey("PurchaseOrderId", "CurrencyId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("PurchaseOrderAmmountDetails");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.PurchaseOrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("From");

                    b.Property<int>("PurchaseOrderId");

                    b.Property<int>("To");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseOrderHistories");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId")
                        .HasMaxLength(200);

                    b.Property<string>("AccountName")
                        .HasMaxLength(200);

                    b.Property<bool>("Active");

                    b.Property<string>("Analytic")
                        .HasMaxLength(200);

                    b.Property<string>("CrmId")
                        .HasMaxLength(200);

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Industry")
                        .HasMaxLength(200);

                    b.Property<string>("Manager")
                        .HasMaxLength(200);

                    b.Property<string>("ManagerId")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("ServiceType")
                        .HasMaxLength(200);

                    b.Property<int>("ServiceTypeId");

                    b.Property<string>("SolutionType")
                        .HasMaxLength(200);

                    b.Property<int>("SolutionTypeId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("TechnologyType")
                        .HasMaxLength(200);

                    b.Property<int>("TechnologyTypeId");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.Solfac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountId");

                    b.Property<string>("AccountName")
                        .HasMaxLength(100);

                    b.Property<string>("Analytic");

                    b.Property<decimal>("BuenosAiresPercentage");

                    b.Property<string>("BusinessName")
                        .HasMaxLength(100);

                    b.Property<decimal>("CapitalPercentage");

                    b.Property<DateTime?>("CashedDate");

                    b.Property<string>("CelPhone")
                        .HasMaxLength(50);

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100);

                    b.Property<decimal?>("CurrencyExchange");

                    b.Property<int>("CurrencyId");

                    b.Property<int>("DocumentTypeId");

                    b.Property<int?>("IdToCompareByCreditNote");

                    b.Property<string>("ImputationNumber1")
                        .HasMaxLength(50);

                    b.Property<int>("ImputationNumber3Id");

                    b.Property<string>("Integrator")
                        .HasMaxLength(300);

                    b.Property<string>("IntegratorId")
                        .HasMaxLength(50);

                    b.Property<string>("InvoiceCode")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("InvoiceDate");

                    b.Property<bool>("InvoiceRequired");

                    b.Property<string>("Manager")
                        .HasMaxLength(300);

                    b.Property<string>("ManagerId")
                        .HasMaxLength(100);

                    b.Property<int>("ModifiedByUserId");

                    b.Property<string>("OpportunityNumber")
                        .HasMaxLength(100);

                    b.Property<decimal>("OtherProvince1Percentage");

                    b.Property<decimal>("OtherProvince2Percentage");

                    b.Property<decimal>("OtherProvince3Percentage");

                    b.Property<string>("ParticularSteps")
                        .HasMaxLength(1000);

                    b.Property<string>("PaymentTerm")
                        .HasMaxLength(300);

                    b.Property<string>("Project")
                        .HasMaxLength(1000);

                    b.Property<string>("ProjectId");

                    b.Property<int>("Province1Id");

                    b.Property<int>("Province2Id");

                    b.Property<int>("Province3Id");

                    b.Property<int?>("PurchaseOrderId");

                    b.Property<string>("Service");

                    b.Property<string>("ServiceId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<decimal>("TotalAmount");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UserApplicantId");

                    b.Property<bool>("WithTax");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ImputationNumber3Id");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("UserApplicantId");

                    b.ToTable("Solfacs");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.SolfacAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<byte[]>("File");

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<int>("SolfacId");

                    b.HasKey("Id");

                    b.HasIndex("SolfacId");

                    b.ToTable("SolfacAttachments");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.SolfacHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("SolfacId");

                    b.Property<int>("SolfacStatusFrom");

                    b.Property<int>("SolfacStatusTo");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SolfacId");

                    b.HasIndex("UserId");

                    b.ToTable("SolfacHistories");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Common.CurrencyExchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrencyId");

                    b.Property<DateTime>("Date");

                    b.Property<decimal>("Exchange");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyExchanges");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Common.Delegation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnalyticSourceId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("GrantedUserId");

                    b.Property<int>("SourceType");

                    b.Property<int>("Type");

                    b.Property<int>("UserId");

                    b.Property<int?>("UserSourceId");

                    b.HasKey("Id");

                    b.HasIndex("GrantedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Delegations");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Common.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("FileName")
                        .HasMaxLength(500);

                    b.Property<string>("FileType")
                        .HasMaxLength(10);

                    b.Property<Guid>("InternalFileName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Common.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Common.UserApprover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnalyticId");

                    b.Property<int>("ApproverUserId");

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedUser");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("ModifiedUser");

                    b.Property<int>("Type");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnalyticId");

                    b.HasIndex("ApproverUserId");

                    b.ToTable("UserApprovers");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Common.UserDelegate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<string>("CreatedUser")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Modified");

                    b.Property<Guid?>("ServiceId")
                        .IsRequired();

                    b.Property<int?>("SourceId");

                    b.Property<int>("Type");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserDelegate");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<decimal>("LastValue");

                    b.Property<int>("ManagementReportId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDate");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ManagementReportId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.BudgetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("BudgetType");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.ContratedDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CostDetailId");

                    b.Property<decimal>("Honorary");

                    b.Property<decimal>("Insurance");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("CostDetailId");

                    b.ToTable("ContractedDetails");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.CostDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Closed");

                    b.Property<bool>("HasReal");

                    b.Property<int>("ManagementReportId");

                    b.Property<DateTime>("MonthYear");

                    b.Property<decimal?>("Provision");

                    b.Property<decimal?>("TotalBilling");

                    b.Property<decimal?>("TotalProvisioned");

                    b.HasKey("Id");

                    b.HasIndex("ManagementReportId");

                    b.ToTable("CostDetails");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.CostDetailCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BelongEmployee");

                    b.Property<bool>("Default");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("CostDetailCategories");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.CostDetailOther", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CostDetailId");

                    b.Property<int>("CostDetailSubcategoryId");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool>("IsReal");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CostDetailId");

                    b.HasIndex("CostDetailSubcategoryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CostDetailOthers");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.CostDetailProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CostDetailId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("EmployeeProfileId");

                    b.Property<string>("Guid");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CostDetailId");

                    b.HasIndex("EmployeeProfileId");

                    b.ToTable("CostDetailProfiles");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.CostDetailResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Adjustment");

                    b.Property<int>("BudgetTypeId");

                    b.Property<string>("Charges");

                    b.Property<int>("CostDetailId");

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("BudgetTypeId");

                    b.HasIndex("CostDetailId");

                    b.ToTable("CostDetailResources");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.CostDetailStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BudgetTypeId");

                    b.Property<int>("CostDetailId");

                    b.Property<int>("CostDetailSubcategoryId");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<decimal>("OriginalValue");

                    b.Property<decimal?>("Value");

                    b.HasKey("Id");

                    b.HasIndex("BudgetTypeId");

                    b.HasIndex("CostDetailId");

                    b.HasIndex("CostDetailSubcategoryId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CostDetailStaff");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.CostDetailSubcategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Codigo");

                    b.Property<int>("CostDetailCategoryId");

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("CostDetailCategoryId");

                    b.ToTable("CostDetailSubcategories");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.ManagementReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnalyticId");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<bool>("StateGenerated");

                    b.Property<int?>("StateId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AnalyticId")
                        .IsUnique();

                    b.HasIndex("StateId");

                    b.ToTable("ManagementReports");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.ManagementReportBilling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BilledResourceTotal");

                    b.Property<int>("BilledResources");

                    b.Property<bool>("Closed");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000);

                    b.Property<decimal>("EvalPropBillingValue");

                    b.Property<decimal>("EvalPropDifference");

                    b.Property<decimal>("EvalPropExpenseValue");

                    b.Property<int>("ManagementReportId");

                    b.Property<DateTime>("MonthYear");

                    b.HasKey("Id");

                    b.HasIndex("ManagementReportId");

                    b.ToTable("ManagementReportBillings");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.ManagementReportComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("ManagementReportId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("ManagementReportId");

                    b.ToTable("ManagementReportComments");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.ResourceBilling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("HitoCrmId");

                    b.Property<int>("ManagementReportBillingId");

                    b.Property<int>("MonthHour");

                    b.Property<string>("Profile");

                    b.Property<int?>("ProfileId");

                    b.Property<int>("Quantity");

                    b.Property<int?>("SeniorityId");

                    b.Property<decimal>("SubTotal");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagementReportBillingId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("SeniorityId");

                    b.ToTable("ResourceBillings");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.Applicant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("Aggreements")
                        .HasMaxLength(3000);

                    b.Property<int?>("AnalyticId");

                    b.Property<string>("AreaCode1")
                        .HasMaxLength(5);

                    b.Property<string>("AreaCode2")
                        .HasMaxLength(5);

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("CivilStatus")
                        .HasMaxLength(50);

                    b.Property<int?>("ClientId");

                    b.Property<string>("Comments")
                        .HasMaxLength(3000);

                    b.Property<string>("CountryCode1")
                        .HasMaxLength(5);

                    b.Property<string>("CountryCode2")
                        .HasMaxLength(5);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(25);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Cuil")
                        .HasMaxLength(12);

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(10);

                    b.Property<string>("Email")
                        .HasMaxLength(75);

                    b.Property<string>("FirstName")
                        .HasMaxLength(75);

                    b.Property<string>("LastName")
                        .HasMaxLength(75);

                    b.Property<int?>("ManagerId");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50);

                    b.Property<string>("Office")
                        .HasMaxLength(100);

                    b.Property<string>("Prepaid")
                        .HasMaxLength(100);

                    b.Property<int?>("ProfileId");

                    b.Property<int?>("ProjectId");

                    b.Property<int?>("ReasonCauseId");

                    b.Property<int?>("RecommendedByUserId");

                    b.Property<decimal?>("Salary");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("Status");

                    b.Property<string>("Telephone1")
                        .HasMaxLength(100);

                    b.Property<string>("Telephone2")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AnalyticId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReasonCauseId");

                    b.HasIndex("RecommendedByUserId");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.ApplicantHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantId");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("ReasonCauseId");

                    b.Property<int>("StatusFromId");

                    b.Property<int>("StatusToId");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ReasonCauseId");

                    b.ToTable("ApplicantHistories");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.JobSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Area")
                        .HasMaxLength(3000);

                    b.Property<string>("Benefits")
                        .HasMaxLength(3000);

                    b.Property<string>("ClientContact");

                    b.Property<int?>("ClientId");

                    b.Property<DateTime?>("CloseDate");

                    b.Property<string>("Comments")
                        .HasMaxLength(3000);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<bool>("ExtraHoursPaid");

                    b.Property<bool>("GuardsPaid");

                    b.Property<bool>("HasExtraHours");

                    b.Property<bool>("HasGuards");

                    b.Property<bool>("IsMarketStudy");

                    b.Property<bool>("IsStaff");

                    b.Property<string>("IsStaffDesc")
                        .HasMaxLength(150);

                    b.Property<string>("JobTime")
                        .HasMaxLength(100);

                    b.Property<int>("JobType");

                    b.Property<string>("Language")
                        .HasMaxLength(100);

                    b.Property<bool>("LanguageRequired");

                    b.Property<string>("Location")
                        .HasMaxLength(200);

                    b.Property<string>("MarketStudy")
                        .HasMaxLength(150);

                    b.Property<decimal>("MaximunSalary");

                    b.Property<string>("Observations")
                        .HasMaxLength(3000);

                    b.Property<int>("Quantity");

                    b.Property<int>("ReasonCauseId");

                    b.Property<string>("ReasonComments")
                        .HasMaxLength(1000);

                    b.Property<int?>("RecruiterId");

                    b.Property<DateTime?>("ReopenDate");

                    b.Property<int>("ResourceAssignmentId");

                    b.Property<int>("Status");

                    b.Property<string>("Study")
                        .HasMaxLength(100);

                    b.Property<bool>("StudyRequired");

                    b.Property<DateTime?>("SuspendedDate");

                    b.Property<string>("TasksToDo")
                        .HasMaxLength(3000);

                    b.Property<string>("Telephone");

                    b.Property<int>("TimeHiringId");

                    b.Property<int>("UserId");

                    b.Property<int?>("YearsExperience");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ReasonCauseId");

                    b.HasIndex("RecruiterId");

                    b.HasIndex("ResourceAssignmentId");

                    b.HasIndex("TimeHiringId");

                    b.HasIndex("UserId");

                    b.ToTable("JobSearchs");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.JobSearchApplicant", b =>
                {
                    b.Property<int>("JobSearchId");

                    b.Property<int>("ApplicantId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ClientExternalInterviewer");

                    b.Property<string>("ClientInterviewComments")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ClientInterviewDate");

                    b.Property<string>("ClientInterviewPlace")
                        .HasMaxLength(100);

                    b.Property<int?>("ClientInterviewerId");

                    b.Property<string>("Comments")
                        .HasMaxLength(3000);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50);

                    b.Property<bool>("HasClientInterview");

                    b.Property<bool>("HasRrhhInterview");

                    b.Property<bool>("HasTechnicalInterview");

                    b.Property<bool>("IsClientExternal");

                    b.Property<bool>("IsTechnicalExternal");

                    b.Property<int>("ReasonId");

                    b.Property<string>("RrhhInterviewComments")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("RrhhInterviewDate");

                    b.Property<string>("RrhhInterviewPlace")
                        .HasMaxLength(100);

                    b.Property<int?>("RrhhInterviewerId");

                    b.Property<string>("TechnicalExternalInterviewer");

                    b.Property<string>("TechnicalInterviewComments")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("TechnicalInterviewDate");

                    b.Property<string>("TechnicalInterviewPlace")
                        .HasMaxLength(100);

                    b.Property<int?>("TechnicalInterviewerId");

                    b.HasKey("JobSearchId", "ApplicantId", "CreatedDate");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ClientInterviewerId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("RrhhInterviewerId");

                    b.HasIndex("TechnicalInterviewerId");

                    b.ToTable("JobSearchApplicants");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.JobSearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("JobSearchId");

                    b.Property<int>("ReasonCauseId");

                    b.Property<int>("StatusFromId");

                    b.Property<int>("StatusToId");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("JobSearchId");

                    b.HasIndex("ReasonCauseId");

                    b.ToTable("JobSearchHistories");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.ReasonCause", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(75);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("ReasonCauses");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.ResourceAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("ResourceAssignments");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.Seniority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("Seniorities");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.TimeHiring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(75);

                    b.HasKey("Id");

                    b.ToTable("TimeHirings");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Rrhh.CloseDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Day");

                    b.Property<int>("Month");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("CloseDates");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Rrhh.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("DaysQuantity");

                    b.Property<int>("DaysQuantityByLaw");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("ExamDescription")
                        .HasMaxLength(200);

                    b.Property<bool>("Final");

                    b.Property<bool>("HasCertificate");

                    b.Property<int>("ManagerId");

                    b.Property<bool>("Parcial");

                    b.Property<int>("SectorId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<int>("TypeId");

                    b.Property<bool>("WithPayment");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SectorId");

                    b.HasIndex("TypeId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Rrhh.LicenseHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("LicenseId");

                    b.Property<int>("LicenseStatusFrom");

                    b.Property<int>("LicenseStatusTo");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LicenseId");

                    b.HasIndex("UserId");

                    b.ToTable("LicenseHistories");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Rrhh.PrepaidImportedData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Closed");

                    b.Property<string>("Comments")
                        .HasMaxLength(500);

                    b.Property<string>("Cuil")
                        .HasMaxLength(15);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Dni")
                        .HasMaxLength(15);

                    b.Property<int>("EmployeeId");

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(100);

                    b.Property<string>("EmployeeNumber")
                        .HasMaxLength(15);

                    b.Property<DateTime>("Period");

                    b.Property<int>("PrepaidBeneficiaries");

                    b.Property<decimal>("PrepaidCost");

                    b.Property<int?>("PrepaidId");

                    b.Property<string>("PrepaidPlan")
                        .HasMaxLength(100);

                    b.Property<int>("Status");

                    b.Property<int>("TigerBeneficiaries");

                    b.Property<decimal>("TigerCost");

                    b.Property<string>("TigerPlan")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("PrepaidId");

                    b.ToTable("PrepaidImportedData");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Rrhh.SocialCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChargesTotal");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("Month");

                    b.Property<string>("SalaryTotal");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SocialCharges");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Rrhh.SocialChargeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .HasMaxLength(500);

                    b.Property<int>("AccountNumber");

                    b.Property<int>("SocialChargeId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SocialChargeId");

                    b.ToTable("SocialChargeItems");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.UserSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<int>("SourceId");

                    b.HasKey("Id");

                    b.ToTable("UserSources");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedById");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<int>("ModifiedById");

                    b.Property<int>("Version");

                    b.Property<int>("WorkflowTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("WorkflowTypeId");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.WorkflowReadAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<int>("ModifiedById");

                    b.Property<int>("UserSourceId");

                    b.Property<int>("WorkflowId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserSourceId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowReadAccesses");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.WorkflowState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasMaxLength(300);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<int>("ModifiedById");

                    b.Property<string>("Name")
                        .HasMaxLength(300);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("WorkflowStates");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.WorkflowStateAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AccessDenied");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<int>("ModifiedById");

                    b.Property<int>("UserSourceId");

                    b.Property<int>("WorkflowStateTransitionId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserSourceId");

                    b.HasIndex("WorkflowStateTransitionId");

                    b.ToTable("WorkflowStateAccesses");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.WorkflowStateNotifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<int>("ModifiedById");

                    b.Property<int>("UserSourceId");

                    b.Property<int>("WorkflowStateTransitionId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserSourceId");

                    b.HasIndex("WorkflowStateTransitionId");

                    b.ToTable("WorkflowStateNotifiers");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.WorkflowStateTransition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActualWorkflowStateId");

                    b.Property<string>("ConditionCode");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<int>("ModifiedById");

                    b.Property<int>("NextWorkflowStateId");

                    b.Property<string>("NotificationCode")
                        .HasMaxLength(50);

                    b.Property<string>("OnSuccessCode")
                        .HasMaxLength(50);

                    b.Property<string>("ParameterCode")
                        .HasMaxLength(50);

                    b.Property<string>("ValidationCode")
                        .HasMaxLength(50);

                    b.Property<int>("WorkflowId");

                    b.HasKey("Id");

                    b.HasIndex("ActualWorkflowStateId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("NextWorkflowStateId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowStateTransitions");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.WorkflowType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<int>("ModifiedById");

                    b.Property<string>("Name")
                        .HasMaxLength(300);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("WorkflowTypes");
                });

            modelBuilder.Entity("Sofco.Domain.Models.WorkTimeManagement.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int>("DataSource");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("Modified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("Sofco.Domain.Models.WorkTimeManagement.WorkTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnalyticId");

                    b.Property<string>("ApprovalComment")
                        .HasMaxLength(500);

                    b.Property<int?>("ApprovalUserId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeId");

                    b.Property<decimal>("Hours");

                    b.Property<string>("Reference")
                        .HasMaxLength(250);

                    b.Property<string>("Source")
                        .HasMaxLength(50);

                    b.Property<int>("Status");

                    b.Property<int>("TaskId");

                    b.Property<string>("UserComment")
                        .HasMaxLength(500);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnalyticId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkTimes");
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.ApplicantProfile", b =>
                {
                    b.Property<int>("ApplicantId");

                    b.Property<int>("ProfileId");

                    b.HasKey("ApplicantId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ApplicantProfiles");
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.ApplicantSkills", b =>
                {
                    b.Property<int>("ApplicantId");

                    b.Property<int>("SkillId");

                    b.HasKey("ApplicantId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ApplicantSkillses");
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.EmployeeCategory", b =>
                {
                    b.Property<int>("CategoryId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("CategoryId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeCategories");
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.JobSearchProfile", b =>
                {
                    b.Property<int>("JobSearchId");

                    b.Property<int>("ProfileId");

                    b.HasKey("JobSearchId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("JobSearchProfiles");
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.JobSearchSeniority", b =>
                {
                    b.Property<int>("JobSearchId");

                    b.Property<int>("SeniorityId");

                    b.HasKey("JobSearchId", "SeniorityId");

                    b.HasIndex("SeniorityId");

                    b.ToTable("JobSearchSeniorities");
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.JobSearchSkillNotRequired", b =>
                {
                    b.Property<int>("JobSearchId");

                    b.Property<int>("SkillId");

                    b.HasKey("JobSearchId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobSearchSkillNotRequired");
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.JobSearchSkillRequired", b =>
                {
                    b.Property<int>("JobSearchId");

                    b.Property<int>("SkillId");

                    b.HasKey("JobSearchId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobSearchSkills");
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.LicenseFile", b =>
                {
                    b.Property<int>("LicenseId");

                    b.Property<int>("FileId");

                    b.HasKey("LicenseId", "FileId");

                    b.HasIndex("FileId");

                    b.ToTable("LicenseFiles");
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.PurchaseOrderAnalytic", b =>
                {
                    b.Property<int>("PurchaseOrderId");

                    b.Property<int>("AnalyticId");

                    b.HasKey("PurchaseOrderId", "AnalyticId");

                    b.HasIndex("AnalyticId");

                    b.ToTable("PurchaseOrderAnalytics");
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.RoleFunctionality", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("FunctionalityId");

                    b.HasKey("RoleId", "FunctionalityId");

                    b.HasIndex("FunctionalityId");

                    b.ToTable("RoleFunctionality");
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.SolfacCertificate", b =>
                {
                    b.Property<int>("SolfacId");

                    b.Property<int>("CertificateId");

                    b.HasKey("SolfacId", "CertificateId");

                    b.HasIndex("CertificateId");

                    b.ToTable("SolfacCertificates");
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.UserGroup", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("GroupId");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserGroup");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("ResponsableUserId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Text")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ResponsableUserId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.ClientGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("ClientGroups");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("CrmId")
                        .HasMaxLength(100);

                    b.Property<string>("Text")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.EmployeeEndReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("EmployeeEndReason");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.EmployeeProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("EmployeeProfile");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.ImputationNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ImputationNumbers");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.MonthsReturn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MonthsReturns");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.PaymentTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("PaymentTerms");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.Prepaid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(100);

                    b.Property<string>("Text")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Prepaids");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.PurchaseOrderOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("PurchaseOrderOptions");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("ResponsableUserId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Text")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ResponsableUserId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.SoftwareLaw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("SoftwareLaws");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("Sofco.Domain.Utils.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Text")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Admin.Functionality", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.Module", "Module")
                        .WithMany("Functionalities")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Admin.Group", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.Role", "Role")
                        .WithMany("Groups")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Admin.Task", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.Category", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.Advancement", b =>
                {
                    b.HasOne("Sofco.Domain.Utils.Currency", "Currency")
                        .WithMany("Advancements")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Utils.MonthsReturn", "MonthsReturn")
                        .WithMany("Advancements")
                        .HasForeignKey("MonthsReturnId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Workflow.WorkflowState", "Status")
                        .WithMany("Advancements")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "UserApplicant")
                        .WithMany("Advancements")
                        .HasForeignKey("UserApplicantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User")
                        .WithMany("Advancements2")
                        .HasForeignKey("UserId");

                    b.HasOne("Sofco.Domain.Models.Workflow.Workflow", "Workflow")
                        .WithMany("Advancements")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.AdvancementHistory", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AdvancementAndRefund.Advancement", "Advancement")
                        .WithMany("Histories")
                        .HasForeignKey("AdvancementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Workflow.WorkflowState", "StatusFrom")
                        .WithMany("AdvancementHistories")
                        .HasForeignKey("StatusFromId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Workflow.WorkflowState", "StatusTo")
                        .WithMany("AdvancementHistories2")
                        .HasForeignKey("StatusToId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.AdvancementRefund", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AdvancementAndRefund.Advancement", "Advancement")
                        .WithMany("AdvancementRefunds")
                        .HasForeignKey("AdvancementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.AdvancementAndRefund.Refund", "Refund")
                        .WithMany("AdvancementRefunds")
                        .HasForeignKey("RefundId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.Refund", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Analytic", "Analytic")
                        .WithMany("Refunds")
                        .HasForeignKey("AnalyticId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Utils.CreditCard", "CreditCard")
                        .WithMany("Refunds")
                        .HasForeignKey("CreditCardId");

                    b.HasOne("Sofco.Domain.Utils.Currency", "Currency")
                        .WithMany("Refunds")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Workflow.WorkflowState", "Status")
                        .WithMany("Refunds")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "UserApplicant")
                        .WithMany("Refunds")
                        .HasForeignKey("UserApplicantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User")
                        .WithMany("Refunds2")
                        .HasForeignKey("UserId");

                    b.HasOne("Sofco.Domain.Models.Workflow.Workflow", "Workflow")
                        .WithMany("Refunds")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.RefundDetail", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AdvancementAndRefund.Refund", "Refund")
                        .WithMany("Details")
                        .HasForeignKey("RefundId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.RefundFile", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Common.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.AdvancementAndRefund.Refund", "Refund")
                        .WithMany("Attachments")
                        .HasForeignKey("RefundId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.RefundHistory", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AdvancementAndRefund.Refund", "Refund")
                        .WithMany("Histories")
                        .HasForeignKey("RefundId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Workflow.WorkflowState", "StatusFrom")
                        .WithMany("RefundHistories")
                        .HasForeignKey("StatusFromId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Workflow.WorkflowState", "StatusTo")
                        .WithMany("RefundHistories2")
                        .HasForeignKey("StatusToId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.AdvancementAndRefund.SalaryDiscount", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Employee", "Employee")
                        .WithMany("SalaryDiscounts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.Allocation", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Analytic", "Analytic")
                        .WithMany("Allocations")
                        .HasForeignKey("AnalyticId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Employee", "Employee")
                        .WithMany("Allocations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.Analytic", b =>
                {
                    b.HasOne("Sofco.Domain.Utils.ImputationNumber", "Activity")
                        .WithMany("Analytics")
                        .HasForeignKey("ActivityId");

                    b.HasOne("Sofco.Domain.Utils.ClientGroup", "ClientGroup")
                        .WithMany("Analytics")
                        .HasForeignKey("ClientGroupId");

                    b.HasOne("Sofco.Domain.Models.Admin.User", "CommercialManager")
                        .WithMany("Analytics3")
                        .HasForeignKey("CommercialManagerId");

                    b.HasOne("Sofco.Domain.Models.AllocationManagement.CostCenter", "CostCenter")
                        .WithMany("Analytics")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "Manager")
                        .WithMany("Analytics2")
                        .HasForeignKey("ManagerId");

                    b.HasOne("Sofco.Domain.Utils.Sector", "Sector")
                        .WithMany("Analytics")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Utils.ServiceType", "ServiceType")
                        .WithMany("Analytics")
                        .HasForeignKey("ServiceTypeId");

                    b.HasOne("Sofco.Domain.Utils.SoftwareLaw", "SoftwareLaw")
                        .WithMany("Analytics")
                        .HasForeignKey("SoftwareLawId");

                    b.HasOne("Sofco.Domain.Utils.Solution", "Solution")
                        .WithMany("Analytics")
                        .HasForeignKey("SolutionId");

                    b.HasOne("Sofco.Domain.Utils.Technology", "Technology")
                        .WithMany("Analytics")
                        .HasForeignKey("TechnologyId");
                });

            modelBuilder.Entity("Sofco.Domain.Models.AllocationManagement.Employee", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.User", "Manager")
                        .WithMany("Employees")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sofco.Domain.Utils.EmployeeEndReason", "TypeEndReason")
                        .WithMany("Employees")
                        .HasForeignKey("TypeEndReasonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.Certificate", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Common.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.Hito", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Billing.Solfac", "Solfac")
                        .WithMany("Hitos")
                        .HasForeignKey("SolfacId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.HitoDetail", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Billing.Hito", "Hito")
                        .WithMany("Details")
                        .HasForeignKey("HitoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.Invoice", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Common.File", "ExcelFileData")
                        .WithMany()
                        .HasForeignKey("ExcelFileId");

                    b.HasOne("Sofco.Domain.Models.Common.File", "PDfFileData")
                        .WithMany()
                        .HasForeignKey("PdfFileId");

                    b.HasOne("Sofco.Domain.Models.Billing.Solfac", "Solfac")
                        .WithMany("Invoices")
                        .HasForeignKey("SolfacId");

                    b.HasOne("Sofco.Domain.Models.Admin.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.InvoiceHistory", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Billing.Invoice", "Invoice")
                        .WithMany("Histories")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.PurchaseOrder", b =>
                {
                    b.HasOne("Sofco.Domain.Utils.Area", "Area")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("AreaId");

                    b.HasOne("Sofco.Domain.Models.Common.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.PurchaseOrderAmmountDetail", b =>
                {
                    b.HasOne("Sofco.Domain.Utils.Currency", "Currency")
                        .WithMany("AmmountDetails")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Billing.PurchaseOrder", "PurchaseOrder")
                        .WithMany("AmmountDetails")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.PurchaseOrderHistory", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Billing.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Histories")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.Solfac", b =>
                {
                    b.HasOne("Sofco.Domain.Utils.Currency", "Currency")
                        .WithMany("Solfacs")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Utils.DocumentType", "DocumentType")
                        .WithMany("Solfacs")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Utils.ImputationNumber", "ImputationNumber")
                        .WithMany("Solfacs")
                        .HasForeignKey("ImputationNumber3Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Billing.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Solfacs")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("Sofco.Domain.Models.Admin.User", "UserApplicant")
                        .WithMany("Solfacs")
                        .HasForeignKey("UserApplicantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.SolfacAttachment", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Billing.Solfac", "Solfac")
                        .WithMany("Attachments")
                        .HasForeignKey("SolfacId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Billing.SolfacHistory", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Billing.Solfac", "Solfac")
                        .WithMany("Histories")
                        .HasForeignKey("SolfacId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Common.CurrencyExchange", b =>
                {
                    b.HasOne("Sofco.Domain.Utils.Currency", "Currency")
                        .WithMany("CurrencyExchanges")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Common.Delegation", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.User", "GrantedUser")
                        .WithMany("Delegations2")
                        .HasForeignKey("GrantedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "User")
                        .WithMany("Delegations1")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Common.UserApprover", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Analytic", "Analytic")
                        .WithMany()
                        .HasForeignKey("AnalyticId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "ApproverUser")
                        .WithMany()
                        .HasForeignKey("ApproverUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.Budget", b =>
                {
                    b.HasOne("Sofco.Domain.Models.ManagementReport.ManagementReport", "ManagementReport")
                        .WithMany("Budgets")
                        .HasForeignKey("ManagementReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.ContratedDetail", b =>
                {
                    b.HasOne("Sofco.Domain.Models.ManagementReport.CostDetail", "CostDetail")
                        .WithMany("ContratedDetails")
                        .HasForeignKey("CostDetailId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.CostDetail", b =>
                {
                    b.HasOne("Sofco.Domain.Models.ManagementReport.ManagementReport", "ManagementReport")
                        .WithMany("CostDetails")
                        .HasForeignKey("ManagementReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.CostDetailOther", b =>
                {
                    b.HasOne("Sofco.Domain.Models.ManagementReport.CostDetail", "CostDetail")
                        .WithMany("CostDetailOthers")
                        .HasForeignKey("CostDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.ManagementReport.CostDetailSubcategories", "CostDetailSubcategory")
                        .WithMany("CostDetailOther")
                        .HasForeignKey("CostDetailSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Utils.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.CostDetailProfile", b =>
                {
                    b.HasOne("Sofco.Domain.Models.ManagementReport.CostDetail", "CostDetail")
                        .WithMany("CostDetailProfiles")
                        .HasForeignKey("CostDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Utils.EmployeeProfile", "EmployeeProfile")
                        .WithMany("CostDetailProfiles")
                        .HasForeignKey("EmployeeProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.CostDetailResource", b =>
                {
                    b.HasOne("Sofco.Domain.Models.ManagementReport.BudgetType", "BudgetType")
                        .WithMany("CostDetailResource")
                        .HasForeignKey("BudgetTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "User")
                        .WithMany("CostDetailResources")
                        .HasForeignKey("CostDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Employee", "Employee")
                        .WithMany("CostDetailResources")
                        .HasForeignKey("CostDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.ManagementReport.CostDetail", "CostDetail")
                        .WithMany("CostDetailResources")
                        .HasForeignKey("CostDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.CostDetailStaff", b =>
                {
                    b.HasOne("Sofco.Domain.Models.ManagementReport.BudgetType", "BudgetType")
                        .WithMany("CostDetailStaff")
                        .HasForeignKey("BudgetTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.ManagementReport.CostDetail", "CostDetail")
                        .WithMany("CostDetailStaff")
                        .HasForeignKey("CostDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.ManagementReport.CostDetailSubcategories", "CostDetailSubcategory")
                        .WithMany("CostDetailStaff")
                        .HasForeignKey("CostDetailSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Utils.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.CostDetailSubcategories", b =>
                {
                    b.HasOne("Sofco.Domain.Models.ManagementReport.CostDetailCategories", "CostDetailCategory")
                        .WithMany("Subcategories")
                        .HasForeignKey("CostDetailCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.ManagementReport", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Analytic", "Analytic")
                        .WithOne("ManagementReport")
                        .HasForeignKey("Sofco.Domain.Models.ManagementReport.ManagementReport", "AnalyticId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.ManagementReport.BudgetType", "State")
                        .WithMany("ManagementReport")
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.ManagementReportBilling", b =>
                {
                    b.HasOne("Sofco.Domain.Models.ManagementReport.ManagementReport", "ManagementReport")
                        .WithMany("Billings")
                        .HasForeignKey("ManagementReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.ManagementReportComment", b =>
                {
                    b.HasOne("Sofco.Domain.Models.ManagementReport.ManagementReport", "ManagementReport")
                        .WithMany("Comments")
                        .HasForeignKey("ManagementReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.ManagementReport.ResourceBilling", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Employee", "Employee")
                        .WithMany("ResourceBillings")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Sofco.Domain.Models.ManagementReport.ManagementReportBilling", "ManagementReportBilling")
                        .WithMany("ResourceBillings")
                        .HasForeignKey("ManagementReportBillingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Recruitment.Profile")
                        .WithMany("ResourceBillings")
                        .HasForeignKey("ProfileId");

                    b.HasOne("Sofco.Domain.Models.Recruitment.Seniority", "Seniority")
                        .WithMany("ResourceBillings")
                        .HasForeignKey("SeniorityId");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.Applicant", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Analytic", "Analytic")
                        .WithMany("Applicants")
                        .HasForeignKey("AnalyticId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Billing.Customer", "Client")
                        .WithMany("Applicants")
                        .HasForeignKey("ClientId");

                    b.HasOne("Sofco.Domain.Models.Admin.User", "Manager")
                        .WithMany("Applicants2")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Recruitment.Profile", "Profile")
                        .WithMany("Applicants")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Billing.Project", "Project")
                        .WithMany("Applicants")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Recruitment.ReasonCause")
                        .WithMany("Applicants")
                        .HasForeignKey("ReasonCauseId");

                    b.HasOne("Sofco.Domain.Models.Admin.User", "RecommendedByUser")
                        .WithMany("Applicants")
                        .HasForeignKey("RecommendedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.ApplicantHistory", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Recruitment.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Recruitment.ReasonCause", "ReasonCause")
                        .WithMany("ApplicantHistories")
                        .HasForeignKey("ReasonCauseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.JobSearch", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Billing.Customer", "Client")
                        .WithMany("JobSearchs")
                        .HasForeignKey("ClientId");

                    b.HasOne("Sofco.Domain.Models.Recruitment.ReasonCause", "ReasonCause")
                        .WithMany("JobSearchs")
                        .HasForeignKey("ReasonCauseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "Recruiter")
                        .WithMany("JobSearchs2")
                        .HasForeignKey("RecruiterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Recruitment.ResourceAssignment", "ResourceAssignment")
                        .WithMany("JobSearchs")
                        .HasForeignKey("ResourceAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Recruitment.TimeHiring", "TimeHiring")
                        .WithMany("JobSearchs")
                        .HasForeignKey("TimeHiringId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "User")
                        .WithMany("JobSearchs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.JobSearchApplicant", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Recruitment.Applicant", "Applicant")
                        .WithMany("JobSearchApplicants")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "ClientInterviewer")
                        .WithMany("JobSearchApplicants3")
                        .HasForeignKey("ClientInterviewerId");

                    b.HasOne("Sofco.Domain.Models.Recruitment.JobSearch", "JobSearch")
                        .WithMany("JobSearchApplicants")
                        .HasForeignKey("JobSearchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Recruitment.ReasonCause", "Reason")
                        .WithMany("JobSearchApplicants")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "RrhhInterviewer")
                        .WithMany("JobSearchApplicants1")
                        .HasForeignKey("RrhhInterviewerId");

                    b.HasOne("Sofco.Domain.Models.Admin.User", "TechnicalInterviewer")
                        .WithMany("JobSearchApplicants2")
                        .HasForeignKey("TechnicalInterviewerId");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Recruitment.JobSearchHistory", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Recruitment.JobSearch", "JobSearch")
                        .WithMany("Histories")
                        .HasForeignKey("JobSearchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Recruitment.ReasonCause", "ReasonCause")
                        .WithMany("JobSearchHistories")
                        .HasForeignKey("ReasonCauseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Rrhh.License", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Employee", "Employee")
                        .WithMany("Licenses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "Manager")
                        .WithMany("Licenses")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Utils.Sector", "Sector")
                        .WithMany("Licenses")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.AllocationManagement.LicenseType", "Type")
                        .WithMany("Licenses")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Rrhh.LicenseHistory", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Rrhh.License", "License")
                        .WithMany("Histories")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Rrhh.PrepaidImportedData", b =>
                {
                    b.HasOne("Sofco.Domain.Utils.Prepaid", "Prepaid")
                        .WithMany("PrepaidImportedData")
                        .HasForeignKey("PrepaidId");
                });

            modelBuilder.Entity("Sofco.Domain.Models.Rrhh.SocialCharge", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Employee", "Employee")
                        .WithMany("SocialCharges")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Rrhh.SocialChargeItem", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Rrhh.SocialCharge", "SocialCharge")
                        .WithMany("Items")
                        .HasForeignKey("SocialChargeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.Workflow", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.User", "CreatedBy")
                        .WithMany("Workflows")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "ModifiedBy")
                        .WithMany("Workflows2")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Workflow.WorkflowType", "WorkflowType")
                        .WithMany("Workflows")
                        .HasForeignKey("WorkflowTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.WorkflowReadAccess", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.User", "CreatedBy")
                        .WithMany("WorkflowReadAccesses")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "ModifiedBy")
                        .WithMany("WorkflowReadAccesses2")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Workflow.UserSource", "UserSource")
                        .WithMany("WorkflowReadAccesses")
                        .HasForeignKey("UserSourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Workflow.Workflow", "Workflow")
                        .WithMany("WorkflowReadAccesses")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.WorkflowState", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.User", "CreatedBy")
                        .WithMany("WorkflowStates")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "ModifiedBy")
                        .WithMany("WorkflowStates2")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.WorkflowStateAccess", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.User", "CreatedBy")
                        .WithMany("WorkflowStateAccesses")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "ModifiedBy")
                        .WithMany("WorkflowStateAccesses2")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Workflow.UserSource", "UserSource")
                        .WithMany("WorkflowStateAccesses")
                        .HasForeignKey("UserSourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Workflow.WorkflowStateTransition", "WorkflowStateTransition")
                        .WithMany("WorkflowStateAccesses")
                        .HasForeignKey("WorkflowStateTransitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.WorkflowStateNotifier", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.User", "CreatedBy")
                        .WithMany("WorkflowStateNotifiers")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "ModifiedBy")
                        .WithMany("WorkflowStateNotifiers2")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Workflow.UserSource", "UserSource")
                        .WithMany("WorkflowStateNotifiers")
                        .HasForeignKey("UserSourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Workflow.WorkflowStateTransition", "WorkflowStateTransition")
                        .WithMany("WorkflowStateNotifiers")
                        .HasForeignKey("WorkflowStateTransitionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.WorkflowStateTransition", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Workflow.WorkflowState", "ActualWorkflowState")
                        .WithMany("ActualTransitions")
                        .HasForeignKey("ActualWorkflowStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "CreatedBy")
                        .WithMany("WorkflowStateTransitions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "ModifiedBy")
                        .WithMany("WorkflowStateTransitions2")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Workflow.WorkflowState", "NextWorkflowState")
                        .WithMany("NextTransitions")
                        .HasForeignKey("NextWorkflowStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Workflow.Workflow", "Workflow")
                        .WithMany("Transitions")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.Workflow.WorkflowType", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.User", "CreatedBy")
                        .WithMany("WorkflowTypes")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "ModifiedBy")
                        .WithMany("WorkflowTypes2")
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Models.WorkTimeManagement.WorkTime", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Analytic", "Analytic")
                        .WithMany("WorkTimes")
                        .HasForeignKey("AnalyticId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Employee", "Employee")
                        .WithMany("WorkTimes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.Task", "Task")
                        .WithMany("WorkTimes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "User")
                        .WithMany("WorkTimes1")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.ApplicantProfile", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Recruitment.Applicant", "Applicant")
                        .WithMany("ApplicantProfiles")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Recruitment.Profile", "Profile")
                        .WithMany("ApplicantProfiles")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.ApplicantSkills", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Recruitment.Applicant", "Applicant")
                        .WithMany("ApplicantSkills")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Recruitment.Skill", "Skill")
                        .WithMany("ApplicantProfiles")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.EmployeeCategory", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.Category", "Category")
                        .WithMany("EmployeeCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Employee", "Employee")
                        .WithMany("EmployeeCategories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.JobSearchProfile", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Recruitment.JobSearch", "JobSearch")
                        .WithMany("JobSearchProfiles")
                        .HasForeignKey("JobSearchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Recruitment.Profile", "Profile")
                        .WithMany("JobSearchProfiles")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.JobSearchSeniority", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Recruitment.JobSearch", "JobSearch")
                        .WithMany("JobSearchSeniorities")
                        .HasForeignKey("JobSearchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Recruitment.Seniority", "Seniority")
                        .WithMany("JobSearchSeniorities")
                        .HasForeignKey("SeniorityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.JobSearchSkillNotRequired", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Recruitment.JobSearch", "JobSearch")
                        .WithMany("JobSearchSkillsNotRequired")
                        .HasForeignKey("JobSearchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Recruitment.Skill", "Skill")
                        .WithMany("JobSearchSkillsNotRequired")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.JobSearchSkillRequired", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Recruitment.JobSearch", "JobSearch")
                        .WithMany("JobSearchSkillsRequired")
                        .HasForeignKey("JobSearchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Recruitment.Skill", "Skill")
                        .WithMany("JobSearchSkillsRequired")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.LicenseFile", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Common.File", "File")
                        .WithMany("LicenseFiles")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Rrhh.License", "License")
                        .WithMany("LicenseFiles")
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.PurchaseOrderAnalytic", b =>
                {
                    b.HasOne("Sofco.Domain.Models.AllocationManagement.Analytic", "Analytic")
                        .WithMany("PurchaseOrderAnalytics")
                        .HasForeignKey("AnalyticId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Billing.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderAnalytics")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.RoleFunctionality", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.Functionality", "Functionality")
                        .WithMany("RoleFunctionality")
                        .HasForeignKey("FunctionalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Admin.Role", "Role")
                        .WithMany("RoleFunctionality")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.SolfacCertificate", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Billing.Certificate", "Certificate")
                        .WithMany("SolfacCertificates")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Billing.Solfac", "Solfac")
                        .WithMany("SolfacCertificates")
                        .HasForeignKey("SolfacId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Relationships.UserGroup", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sofco.Domain.Models.Admin.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Utils.Area", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.User", "ResponsableUser")
                        .WithMany("Areas")
                        .HasForeignKey("ResponsableUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sofco.Domain.Utils.Sector", b =>
                {
                    b.HasOne("Sofco.Domain.Models.Admin.User", "ResponsableUser")
                        .WithMany("Sectors")
                        .HasForeignKey("ResponsableUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
